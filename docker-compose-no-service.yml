version: "3"

services:
  # MySql Database for keycloak service
  mc-mysql-keycloak:
    container_name: mc-mysql-keycloak
    image: mysql:8.0.31
    volumes:
      - ./data/mc-mysql-keycloak:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password
    networks:
      - mc-network

  # Keycloak identity service
  mc-keycloak:
    container_name: mc-keycloak
    image: quay.io/keycloak/keycloak:18.0.0
    command: [ "start-dev" ]
    environment:
      KEYCLOAK_IMPORT: ../data/keycloak/realm-export.json
      DB_VENDOR: MYSQL
      DB_ADDR: mc-mysql-keycloak
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8080:8080"
    volumes:
      - ./data/keycloak/volume/:/opt/keycloak/data/
    depends_on:
      - mc-mysql-keycloak
    networks:
      - mc-network

  ## Kafka orchestration service
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - mc-network

  ## Kafka service
  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - mc-network

  ## Discovery service
  mc-discovery:
    image: mc-discovery
    container_name: mc-discovery
    platform: linux/amd64
    ports:
      - "8761:8761"
    networks:
      - mc-network
  
  ## MongoDB for product service
  mc-mongo:
    container_name: mc-mongo
    image: mongo:4.0.10
    restart: always
    ports:
      - "27017:27017"
    expose:
      - "27017"
    volumes:
      - ./data/mongo-product:/data/db
    networks:
      - mc-network

  # Redis for basket service
  mc-redis:
    container_name: mc-redis
    image: redis:6.2-alpine
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    volumes:
      - ./data/mc-redis/:/data

networks:
  mc-network:
    driver: bridge

volumes:
    mc-data:
        driver: local